#!/usr/bin/env python3

# from sys import argv, exit as exit_code
# from os import system, path
import os
import sys
import getopt
import re
from subprocess import check_output

def GREEN(text):
    return "\033[32m{}\033[0m".format(str(text))

def usage():
    print('''
    ██████╗ ███████╗ ██████╗      ██╗ ██╗ ██╗
    ██╔══██╗██╔════╝██╔════╝     ████████╗╚██╗
    ██████╔╝███████╗██║  ███╗    ╚██╔═██╔╝ ╚██╗
    ██╔══██╗╚════██║██║   ██║    ████████╗ ██╔╝
    ██║  ██║███████║╚██████╔╝    ╚██╔═██╔╝██╔╝
    ╚═╝  ╚═╝╚══════╝ ╚═════╝      ╚═╝ ╚═╝ ╚═╝

    Usage: python3 {} <ip address> <port> [shell type]
    Examples:
        python3 {} 127.0.0.1 4444
        python3 {} 192.168.0.1 443 bash
    '''.format(sys.argv[0],sys.argv[0],sys.argv[0]))
    sys.exit(-1)

def list_types():
    print('here comes the list of handled types')

def verify_ip(ipaddr):

    output = check_output(['ip', 'address']).decode()
    # candidate_ips = [ip for ip in re.findall(r"(?:\d{1,3}\.){3}\d{1,3}",output) if '255' not in ip]
    candidate_ips = grab_ip(output)

    return ipaddr in candidate_ips

def main(argv):

    list = 'all'
    port = '9001'
    host = ''
    type = ''


    # argv = sys.argv[1:]

    if len(argv) < 1:
        usage()
    try:
        opts, args = getopt.getopt(argv, "H:p:T:hlv", ["host=", "port=", "type=", "help", "list-type", "verbose"])
    except:
        print("Error Message ")
        sys.exit(2)
    for opt, arg in opts:
        if opt in ['-H', '--host']:
            host = arg
        elif opt in ['-p', '--port']:
            port = arg
        elif opt in ('-T', '--type'):
            type = arg
        elif opt in ['-h', '--help']:
            usage()
            sys.exit()
        elif opt in ('-l', '--list-type'):
            list_types()
            sys.exit()
        elif opt in ('-v', '--verbose'):
            global _verbose
            _verbose = 1



    print("debug args: " + type + ";" + host + ";" + port)

    # ipaddr, port = argv[1], argv[2]

    ipaddr = host

    if not test_host(ipaddr):
        print("Hostname not supported yet!")
        output = check_output(['getent', 'hosts', ipaddr]).decode()
        # candidate_ips = [ip for ip in re.findall(r"(?:\d{1,3}\.){3}\d{1,3}",output) if '255' not in ip]
        candidate_ips = grab_ip(output)

        if not len(candidate_ips) == 0:
            print(candidate_ips[0])
        else:
            output = check_output(['dig', '+short', ipaddr]).decode()
            # candidate_ips = [ip for ip in re.findall(r"(?:\d{1,3}\.){3}\d{1,3}",output) if '255' not in ip]
            candidate_ips = grab_ip(output)
            if len(candidate_ips) == 0:
                print("Can not find such hostname in any reolver")
                exit_code(-1)
            else:
                print(candidate_ips[0])
    ipaddr = candidate_ips[0]
        #exit_code(-1)

    if not verify_ip(ipaddr):
        print("ERROR. No interface showing a class of network which IP address belongs to. Exiting.")
        exit_code(-1)

    shells = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'shells.txt')
    if len(argv) == 4:
        shell_type = argv[3].upper()
    else:
        shell_type = ''
    for shell in open(shells):
        desc, cmd = shell.split('|', 1)
        cmd = cmd.replace("[IPADDR]", ipaddr)
        cmd = cmd.replace("[PORT]", port)
        if shell_type in desc:
            print(GREEN(desc))
            print(cmd)

    c = input('Select your payload, press "l" to listen on port {} or enter to exit: '.format(port))
    if c == 'l':
        if int(port) < 1024:
            if shell_type == 'SOCAT':
                print(shell_type)
                system('sudo socat file:`tty`,raw,echo=0 tcp-listen:{},fork'.format(port))
            else:
                system('sudo nc -n -v -l -s {} -p {}'.format(ipaddr, port))
        else:
            if shell_type == 'SOCAT':
                print(shell_type)
                system('socat file:`tty`,raw,echo=0 tcp-listen:{},fork'.format(port))
            else:
                system('nc -n -v -l -s {} -p {}'.format(ipaddr, port))

def test_host(host):
    h = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
    # test = h.match(hostIP)
    if h.match(host):
       return True
    else:
       return False

def grab_ip(input):
    candidate_ips = [ip for ip in re.findall(r"(?:\d{1,3}\.){3}\d{1,3}",input) if '255' not in ip]
    return candidate_ips


if __name__ == "__main__":
    main(sys.argv[1:])
